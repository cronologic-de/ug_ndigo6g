import numpy as np
import matplotlib.pyplot as plt
from matplotlib.axes import Axes
from scipy.interpolate import interp1d


# requires atompy v 4.20.0
# get it via github
# pip git+https://github.com/frekm/atompy.git@v4.20.0
import atompy as ap


PULSE_DATA = np.array(
    (
        (0.06980867664180046, 0.4954398835694436),
        (0.07737341699764466, 0.49577498377931806),
        (0.08493789599748813, 0.49576106918584006),
        (0.0925023749973316, 0.49574715459236207),
        (0.1000668539971751, 0.49573323999888413),
        (0.10763148981061901, 0.49592873428741757),
        (0.11519649152246389, 0.4966128493006446),
        (0.12276144096310865, 0.49722716135320105),
        (0.13032680857335457, 0.4983998970911214),
        (0.13789285570920234, 0.5004800713177582),
        (0.14545947782825167, 0.5033280781117704),
        (0.15302672720170268, 0.5070137204338285),
        (0.16059476064315586, 0.5117464071659441),
        (0.16816321225421016, 0.5170375175834235),
        (0.17573155932286422, 0.522189022079562),
        (0.18329980184911795, 0.5272009206543595),
        (0.19086726030736956, 0.5311657748190995),
        (0.19843351652801788, 0.5335251608884184),
        (0.20599810007026165, 0.5336508522162814),
        (0.21356048822209944, 0.5308448191959837),
        (0.220473115953614, 0.5212821729486272),
        (0.22454336556595741, 0.5041149754793007),
        (0.22676579200567007, 0.48737394255340494),
        (0.2280405968449223, 0.4602286789496188),
        (0.22852183861852896, 0.43818365598252834),
        (0.230260773844051, 0.4143743887044039),
        (0.23041861236997194, 0.3910680895119194),
        (0.23131870065676166, 0.3686073002987972),
        (0.23239090058188763, 0.34640213903403927),
        (0.23266462452934575, 0.32929600865957437),
        (0.2331545741041051, 0.3101333927275072),
        (0.2342734176985635, 0.2878169082279355),
        (0.2346825484029416, 0.2690445028272902),
        (0.23535679461358158, 0.25110387697193015),
        (0.23574415469817198, 0.23269260819997906),
        (0.23641817875621143, 0.21445531976176957),
        (0.23706071511238544, 0.19537642546279144),
        (0.2380517408793361, 0.17661905808434097),
        (0.23861106885646252, 0.15827145911891038),
        (0.23939991967341526, 0.14031898860959802),
        (0.24075658992395768, 0.11535841009577652),
        (0.2414264218317456, 0.09152292421179342),
        (0.24278745934105986, 0.07239438306199153),
        (0.24396329998826874, 0.050841689735046214),
        (0.24487146384040867, 0.029746251356854048),
        (0.24666188555946375, 0.006425831131975479),
        (0.24826075825933766, -0.019213719677672825),
        (0.25017872465143065, -0.04413796551032545),
        (0.2517709968823759, -0.0660515753821933),
        (0.25361881597431096, -0.08603552409576709),
        (0.2548043686775207, -0.10403749697294462),
        (0.2570830013048109, -0.12224820496976696),
        (0.2588557482310436, -0.14257740009312536),
        (0.26127711201346104, -0.16259671726606528),
        (0.26403040538409855, -0.1810297888534167),
        (0.2658667511390718, -0.19951601900676097),
        (0.2687480658885464, -0.2175361584676614),
        (0.27285900411869846, -0.23776333918680825),
        (0.2756024583262428, -0.2568894117420645),
        (0.2789754454237103, -0.27360682600084907),
        (0.28258469164438654, -0.29035223810832855),
        (0.288362065355433, -0.3083429694373312),
        (0.29346762869376614, -0.3280984823323303),
        (0.2989858439468489, -0.3453201505453498),
        (0.3051860587022089, -0.3617888688924109),
        (0.3120703613958092, -0.3770985485796392),
        (0.3188548235451757, -0.3898068918614419),
        (0.3239953189770194, -0.3964511026009645),
        (0.3310855387516423, -0.4022659592655293),
        (0.3387043798060173, -0.40621220419964654),
        (0.3462668202290552, -0.40894843425927396),
        (0.35383119468649843, -0.40910195477409284),
        (0.3613976599919473, -0.4064633568620919),
        (0.36928283486725055, -0.40206416038688664),
        (0.3767517362950696, -0.39586684012900575),
        (0.38410664767352026, -0.3857387198430544),
        (0.3916821820321939, -0.3709893082547233),
        (0.3989495044863463, -0.3545780169690649),
        (0.40546186644655413, -0.3361790521987571),
        (0.41154350698724246, -0.3176593524933644),
        (0.4170885953767813, -0.2989946342829324),
        (0.422007875109867, -0.2805354562678175),
        (0.42683547514047004, -0.26206148420872755),
        (0.4316100850983264, -0.24370976179233717),
        (0.43580242030939803, -0.2258801076948801),
        (0.44038339361675666, -0.2087768134478737),
        (0.44408093261505677, -0.19070296124669495),
        (0.4484846920979772, -0.17310010853593882),
        (0.4529307865620081, -0.1578303666365054),
        (0.45707076144383935, -0.13928200270319369),
        (0.461244412302594, -0.1207788673994844),
        (0.4647345328553038, -0.10236010327053369),
        (0.4686584338415122, -0.08537900219466232),
        (0.47213886705469355, -0.06751727601337432),
        (0.47559033788485927, -0.05006820713025695),
        (0.47904203870830564, -0.03231200522018951),
        (0.4823298556292286, -0.01475660113418642),
        (0.48571682703425456, 0.004019841659493317),
        (0.48923523959915916, 0.02340299687061398),
        (0.49181948790853536, 0.041606869201759156),
        (0.49520664549859794, 0.06063194349344614),
        (0.49792287361012477, 0.08016183113198894),
        (0.5012019440035734, 0.09696961070903753),
        (0.5039673975844204, 0.11664026039585862),
        (0.5067325636736665, 0.1359269937989922),
        (0.5089839822723106, 0.15790208991022225),
        (0.5118638335526364, 0.17728459155710385),
        (0.5146283048705139, 0.19564352727465872),
        (0.5173923449509903, 0.21342658856668206),
        (0.5201559058787988, 0.23056978938589257),
        (0.5230695669085348, 0.24800803472625077),
        (0.5258334226995236, 0.2655449958364231),
        (0.5292503001813774, 0.28389190305283274),
        (0.5327030359745867, 0.3030302035841759),
        (0.5363136166354433, 0.3225041409763816),
        (0.5398374658718699, 0.34094806112773907),
        (0.5432889367020356, 0.35839713001085627),
        (0.5469266565700063, 0.37584905560217996),
        (0.5503778135551745, 0.39287901587560475),
        (0.5544452207654411, 0.4101797836539153),
        (0.5580130652469726, 0.4299793906469002),
        (0.5627607067457968, 0.44971544707950384),
        (0.5673005099894914, 0.46706237441787),
        (0.5724512358920593, 0.48702507804040174),
        (0.5789529617766876, 0.5049150075382822),
        (0.5851703106160899, 0.5238052998591729),
        (0.5919550165640721, 0.5392896522377344),
        (0.5993664542017645, 0.5535540682335572),
        (0.6069396363564318, 0.5651623465917163),
        (0.6140894077169281, 0.5764733984411934),
        (0.6220825507665568, 0.5837719079037818),
        (0.6296492251568062, 0.5866897176584646),
        (0.6372136518854495, 0.5866060001043161),
        (0.6447760923084875, 0.5838697700446889),
        (0.6525651458078772, 0.5776429702971893),
        (0.6596799378604349, 0.5702045955037646),
        (0.6669277943361629, 0.5600743947874552),
        (0.6737856675060547, 0.5493647214608179),
        (0.679661690194343, 0.539390508635154),
        (0.6860378995948248, 0.5277507241054659),
        (0.6907577700948216, 0.5171538079359409),
        (0.6970273017438934, 0.5059077343690614),
        (0.7012926144371369, 0.4959890433639621),
        (0.7073238397793895, 0.4847957647078136),
        (0.7116505851138218, 0.47621513068191507),
        (0.7189537342613184, 0.4611591550986114),
        (0.7266315425975469, 0.4504271747470059),
        (0.7325718823894, 0.44231191602454195),
        (0.7402536798605713, 0.43690702647560925),
        (0.7478162183016842, 0.43430168975331734),
        (0.7553795473351246, 0.43275211002508857),
        (0.7629441831485685, 0.432947604313622),
        (0.7705097598436149, 0.43439955189422436),
        (0.7780763296914641, 0.4371777557275661),
        (0.7856434222513147, 0.4406539891676128),
        (0.7932110375231668, 0.44482825221436434),
        (0.8007789664222197, 0.44942133302513887),
        (0.8083470521348729, 0.45422382271792483),
        (0.8159148242203255, 0.45860749464668793),
        (0.8234820474709427, 0.4622582525365149),
        (0.831049688891161, 0.4664674341117058),
        (0.8390937077110002, 0.47025692106647),
        (0.8469908526190599, 0.4723751965551206),
        (0.8565005100922501, 0.47532049091648176),
        (0.8640653288421283, 0.4757602785192579),
        (0.8716341319594687, 0.4762698788978791),
        (0.9094523073835894, 0.47581639687973104),
        (0.9165401476278113, 0.4758731621033274),
        (0.921142865837893, 0.47579489250799234),
        (0.9617159804734171, 0.4757202596884287),
        (0.9692805465919274, 0.4758226833627348),
    )
).T
PULSE_DATA[0] -= PULSE_DATA[0, 0]
PULSE_DATA[1] = PULSE_DATA[1] * 0.9 - 0.08


def format_ax(ax):
    ax.set_box_aspect(1.0 / 1.618)
    ax.spines[["left", "bottom"]].set_position(("data", 0))
    ax.set_axisbelow(True)
    ax.set_xticks(())
    ax.set_xlim(0.0, 0.9)
    ax.set_ylim(-0.55, 0.55)
    ax.grid(False)
    ax.minorticks_on()
    ax.set_yticks((-0.5, 0.0, 0.5))
    ax.set_yticklabels([f"${y}$ V" for y in (-0.5, 0.0, 0.5)])


def generate_sine_wave(x: np.ndarray, amplitude, num_periods):
    """
    Generates numpy array for a sine wave based on a given x array.

    Args:
      x: A numpy array specifying the x values.
      amplitude: The amplitude of the sine wave.
      num_periods: The number of complete sine periods over the range of x.

    Returns:
      A numpy array containing the y values corresponding to the input x array.
    """
    if len(x) < 2:
        return np.array([])

    x_range = x[-1] - x[0]

    if x_range == 0:
        return np.zeros_like(x)

    B = (num_periods * 2 * np.pi) / x_range
    y = amplitude * np.sin(B * (x - x[0]))

    return y


CRONOBLUE = "#376eb5"
CRONOORANGE = "#ed7800"


def plot_pulse():

    ap._set_theme_atompy("lb", use_latex=False, use_serif=False)
    grey = plt.rcParams["axes.edgecolor"]
    plt.rcParams["figure.figsize"] = 4.0, 3.0
    plt.rcParams["ytick.labelcolor"] = grey
    plt.rcParams["ytick.color"] = grey
    plt.rcParams["font.size"] = 7.0
    plt.rcParams["axes.grid"] = 0.0

    _, axs = plt.subplots(nrows=1, ncols=2)

    ofs = PULSE_DATA[1, 0]
    axs[1].plot(
        *PULSE_DATA,
        lw=1.5,
        color=CRONOBLUE,
        zorder=100,
    )
    axs[1].axhline(ofs, ls="--", color=CRONOORANGE, lw=0.8, zorder=101)
    axs[1].text(
        0.62,
        0.15,
        f"{ofs:.2f} V",
        # transform=axs[1].transAxes,
        ha="left",
        color=grey,
        va="center",
    )
    axs[1].text(
        0.5,
        1.05,
        f"analog_offset[i] = {ofs:.2f}",
        transform=axs[1].transAxes,
        ha="center",
        color=grey,
        clip_on=False,
    )
    axs[1].annotate(
        "",
        xy=(0.6, 0.0),
        xytext=(0.6, ofs),
        arrowprops=dict(arrowstyle="<->", shrinkA=0, shrinkB=0, color=grey),
    )

    y_shift = PULSE_DATA[1] - ofs
    y_shift[y_shift < -0.5] = -0.5
    axs[0].plot(
        PULSE_DATA[0],
        y_shift,
        lw=1.5,
        color=CRONOBLUE,
        zorder=100,
    )
    axs[0].text(
        0.5,
        1.05,
        f"analog_offset[i] = 0.0",
        transform=axs[0].transAxes,
        ha="center",
        color=grey,
        clip_on=False,
    )
    axs[0].axhline(0.0, ls="--", color=CRONOORANGE, lw=0.8, zorder=101)

    for ax in axs:
        format_ax(ax)

    ap.make_me_nice(fix_figwidth=True)
    ap.savefig("*_pulse", ftype=("pdf", "svg"), transparent=True, dpi=300)


def plot_sine():

    ap._set_theme_atompy("lb", use_latex=False, use_serif=False)
    grey = plt.rcParams["axes.edgecolor"]
    plt.rcParams["figure.figsize"] = 4.0, 3.0
    plt.rcParams["ytick.labelcolor"] = grey
    plt.rcParams["ytick.color"] = grey
    plt.rcParams["font.size"] = 7.0
    plt.rcParams["axes.grid"] = 0.0

    _, axs = plt.subplots(nrows=1, ncols=2)

    x = np.linspace(0.0, 0.9, 300)
    y = generate_sine_wave(x, 0.48, 2.25)
    axs[0].plot(
        x,
        y,
        lw=1.5,
        color=CRONOBLUE,
        zorder=100,
    )
    axs[0].text(
        0.5,
        1.05,
        f"analog_offset[i] = 0.0",
        transform=axs[0].transAxes,
        ha="center",
        color=grey,
        clip_on=False,
    )
    axs[0].axhline(0.0, ls="--", color=CRONOORANGE, lw=0.8, zorder=101)

    ofs = 0.2
    y += ofs
    y[y > 0.5] = 0.5
    axs[1].plot(
        x,
        y,
        lw=1.5,
        color=CRONOBLUE,
        zorder=100,
    )
    axs[1].axhline(ofs, ls="--", color=CRONOORANGE, lw=0.8, zorder=101)
    axs[1].text(
        0.435,
        0.10,
        f"{ofs:.1f} V",
        ha="left",
        color=grey,
        va="center",
        zorder=102,
    )
    axs[1].text(
        0.5,
        1.05,
        f"analog_offset[i] = {ofs:.1f}",
        transform=axs[1].transAxes,
        ha="center",
        color=grey,
        clip_on=False,
    )
    axs[1].annotate(
        "",
        xy=(0.42, 0.0),
        xytext=(0.42, ofs),
        arrowprops=dict(arrowstyle="<->", shrinkA=0, shrinkB=0, color=grey, lw=0.5),
        zorder=104,
    )

    for ax in axs:
        format_ax(ax)

    ap.make_me_nice(fix_figwidth=True)
    ap.savefig("*_sine", ftype=("pdf", "svg"), transparent=True, dpi=300)


if __name__ == "__main__":
    plot_pulse()
    plot_sine()
